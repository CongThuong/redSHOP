<?php
/**
 * @package     RedSHOP.Library
 * @subpackage  Tags
 *
 * @copyright   Copyright (C) 2008 - 2019 redCOMPONENT.com. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

defined('_JEXEC') or die;

/**
 * Tags replacer abstract class
 *
 * @since  2.1
 */
class RedshopTagsSectionsAccessory extends RedshopTagsAbstract
{
	/**
	 * @var    array
	 *
	 * @since  2.1
	 */
	public $tags = array(
		'{accessory_preview_image}',
		'{accessory_image}',
		'{accessory_add_chkbox}',
		'{accessory_title}',
		'{accessory_price}'
	);

	/**
	 * Init
	 *
	 * @return  void
	 *
	 * @since   2.1
	 */
	public function init()
	{
		$productHelper = productHelper::getInstance();
		$accessories     = $this->data['accessory'];
		$count         = count($accessories);
		$previewImage  = '';

		for ($a = 0; $a < $count; $a++)
		{
			$accessoryId = $accessories[$a]->child_product_id;
			$productInfo = $productHelper->getProductById($accessoryId);
			$imageUrl    = RedshopHelperMedia::getImagePath(
				$productInfo->product_preview_image,
				'',
				'thumb',
				'product',
				Redshop::getConfig()->get('ACCESSORY_THUMB_WIDTH'),
				Redshop::getConfig()->get('ACCESSORY_THUMB_HEIGHT'),
				Redshop::getConfig()->get('USE_IMAGE_SIZE_SWAPPING')
			);

			$previewImage .= RedshopLayoutHelper::render(
				'tags.accessory.preview_image',
				array(
					'accessoryId' => $accessoryId,
					'imageUrl'    => $imageUrl,
					'productInfo' => $productInfo
				),
				'',
				array(
					'component' => 'com_redshop'
				)
			);
		}

		$this->addReplace('{accessory_preview_image}', $previewImage);

	}

	public function replace()
	{
		$accessories     = $this->data['accessory'];

		$subtemplate = $this->getTemplateBetweenLoop('{accessory_product_start}', '{accessory_product_end}');

		$accessoryTemplate = '';
		$attributeTemplate     = (object) \Redshop\Template\Helper::getAttribute($this->template);
		$selectedAccessories  = $this->data['selectedAccessories'];
		$selectedAccessory    = array();
		$selectedAccessoryQua = array();
		$selectAtt            = array();

		if (count($selectedAccessories) > 0)
		{
			$selectedAccessory    = $selectedAccessories[0];
			$selectedAccessoryQua = $selectedAccessories[3];
			$selectAtt            = array($selectedAccessories[1], $selectedAccessories[2]);
		}

		if (!empty($accessories))
		{
			foreach ($accessories as $accessory)
			{
				$accessoryTemplate .= $this->replaceAccessory($accessory, $subtemplate['template'], $attributeTemplate, $selectAtt);
			}
			echo "<pre>";
			print_r($accessoryTemplate);
			echo "</pre>";
			die();
			return $subtemplate['begin'] . $accessoryTemplate . $subtemplate['end'];
//			return '{accessory_product_start}' . $subtemplate['begin'] . $accessoryTemplate . $subtemplate['end'] . '{accessory_product_end}';
		}

		return parent::replace(); // TODO: Change the autogenerated stub
	}

	public function replaceAccessory($accessory, $template, $attributeTemplate, $selectAtt)
	{
		$productHelper      = productHelper::getInstance();
		$accessoryProduct   = RedshopHelperProduct::getProductById($accessory->child_product_id);
		$commonId           = $this->data['prefix'] . $this->data['productId'] . '_' . $accessory->accessory_id;

		$attributeSet = array();

		if ($accessoryProduct->attribute_set_id > 0)
		{
			$attributeSet = RedshopHelperProduct_Attribute::getProductAttribute(0, $accessoryProduct->attribute_set_id);
		}

		$attributes = RedshopHelperProduct_Attribute::getProductAttribute($accessoryProduct->product_id);
		$attributes = array_merge($attributes, $attributeSet);

		// Get accessory final price with VAT rules
		$accessoryPriceWithoutVAT = \Redshop\Product\Accessory::getPrice(
			$this->data['productId'],
			$accessory->newaccessory_price,
			$accessory->accessory_main_price,
			1
		);

		if ($this->isTagExists("{without_vat}"))
		{
			$accessoryPrices = \Redshop\Product\Accessory::getPrice(
				$this->data['productId'],
				$accessory->newaccessory_price,
				$accessory->accessory_main_price
			);
		}
		else
		{
			$accessoryPrices = $accessoryPriceWithoutVAT;
		}

		$accessoryPriceWithoutVAT = $accessoryPriceWithoutVAT[0];

		$accessoryPrice      = $accessoryPrices[0];
		$accessoryMainPrice  = $accessoryPrices[1];
		$accessorySavedPrice = $accessoryPrices[2];

		// Get Formatted prices
		$accessorySavedPrice = RedshopHelperProductPrice::formattedPrice($accessorySavedPrice);
		$accessoryMainPrice  = RedshopHelperProductPrice::formattedPrice($accessoryMainPrice);
		$accessoryShowPrice  = RedshopHelperProductPrice::formattedPrice($accessoryPrice);

		// @Todo: Refactor template section attribute
		$template = RedshopHelperAttribute::replaceAttributeData(
			$this->data['productId'],
			$accessory->accessory_id,
			$this->data['relProductId'],
			$attributes,
			$template,
			$attributeTemplate,
			$this->data['isChild'],
			$selectAtt
		);

		// @Todo: Reacfor section template stock
		$template = Redshop\Product\Stock::replaceInStock($accessory->child_product_id, $template);

		// Accessory attribute  End

		$this->replaceImage($accessory, $template);

		if ($this->isTagExists('{accessory_add_chkbox}'))
		{
			$this->replaceAddCheckbox($accessory, $template, $commonId, $attributes, $accessoryPrice, $accessoryPriceWithoutVAT);
		}

		if ($this->isTagExists('{accessory_title}'))
		{
			$accessoryProductName = RedshopHelperUtility::maxChars(
				$accessory->product_name,
				Redshop::getConfig()->get('ACCESSORY_PRODUCT_TITLE_MAX_CHARS'),
				Redshop::getConfig()->get('ACCESSORY_PRODUCT_TITLE_END_SUFFIX')
			);

			$label = RedshopLayoutHelper::render(
				'tags.common.label',
				array(
					'text' => $accessoryProductName,
					'id' => 'accessory_' . $accessory->accessory_id,
					'class' => 'accessory accessory_' . $accessory->accessory_id
				)
			);

			$template = str_replace('{accessory_title}', $label, $template);
		}

		if ($this->isTagExists('{accessory_price}'))
		{

		}

		return $template;
	}

	public function replaceImage($accessory, &$template)
	{
		$input   = JFactory::getApplication()->input;
		$itemId  = $input->get('Itemid');
		$accessoryImg   = '';

		if ($this->isTagExists('{accessory_image_3}'))
		{
			$accessoryImgTag      = '{accessory_image_3}';
			$accessoryHeightThumb = Redshop::getConfig()->get('ACCESSORY_THUMB_HEIGHT_3');
			$accessoryWidthThumb  = Redshop::getConfig()->get('ACCESSORY_THUMB_WIDTH_3');
		}
		elseif ($this->isTagExists('{accessory_image_2}'))
		{
			$accessoryImgTag      = '{accessory_image_2}';
			$accessoryHeightThumb = Redshop::getConfig()->get('ACCESSORY_THUMB_HEIGHT_2');
			$accessoryWidthThumb  = Redshop::getConfig()->get('ACCESSORY_THUMB_WIDTH_2');
		}
		elseif ($this->isTagExists('{accessory_image_1}'))
		{
			$accessoryImgTag      = '{accessory_image_1}';
			$accessoryHeightThumb = Redshop::getConfig()->get('ACCESSORY_THUMB_HEIGHT');
			$accessoryWidthThumb  = Redshop::getConfig()->get('ACCESSORY_THUMB_WIDTH');
		}
		else
		{
			$accessoryImgTag      = '{accessory_image}';
			$accessoryHeightThumb = Redshop::getConfig()->get('ACCESSORY_THUMB_HEIGHT');
			$accessoryWidthThumb  = Redshop::getConfig()->get('ACCESSORY_THUMB_WIDTH');
		}

		$accessoryProductLink = JRoute::_('index.php?option=com_redshop&view=product&pid=' . $accessory->child_product_id . '&Itemid=' . $itemId, false);

		JPluginHelper::importPlugin('redshop_product');
		$dispatcher = RedshopHelperUtility::getDispatcher();

		// Trigger to change product image.
		$dispatcher->trigger(
			'changeProductImage',
			array(
				&$accessoryImg,
				$accessory,
				$accessoryProductLink,
				$accessoryWidthThumb,
				$accessoryHeightThumb,
				Redshop::getConfig()->get('ACCESSORY_PRODUCT_IN_LIGHTBOX'),
				''
			)
		);

		$accessoryImage = $accessory->product_full_image;

		if (empty($accessoryImg))
		{
			if (Redshop::getConfig()->get('ACCESSORY_PRODUCT_IN_LIGHTBOX') == 1)
			{
				if (JFile::exists(REDSHOP_FRONT_IMAGES_RELPATH . "product/" . $accessoryImage))
				{
					$thumbUrl = RedshopHelperMedia::getImagePath(
						$accessoryImage,
						'',
						'thumb',
						'product',
						$accessoryWidthThumb,
						$accessoryHeightThumb,
						Redshop::getConfig()->get('USE_IMAGE_SIZE_SWAPPING')
					);

					$imageUrl = REDSHOP_FRONT_IMAGES_ABSPATH . "product/" . $accessoryImage;
				}
				else
				{
					$thumbUrl = RedshopHelperMedia::getImagePath(
						'noimage.jpg',
						'',
						'thumb',
						'',
						$accessoryWidthThumb,
						$accessoryHeightThumb,
						Redshop::getConfig()->get('USE_IMAGE_SIZE_SWAPPING')
					);

					$imageUrl = REDSHOP_FRONT_IMAGES_ABSPATH. "noimage.jpg";
					$accessoryImage = 'noimage.jpg';
				}

				$accessoryImg = RedshopLayoutHelper::render(
					'tags.accessory.image.lightbox',
					array(
						'accessoryImage' => $accessoryImage,
						'accessoryId' => $accessory->accessory_id,
						'thumbUrl' => $thumbUrl,
						'imageUrl' => $imageUrl,
						'accessoryWidthThumb'    => $accessoryWidthThumb,
						'accessoryHeightThumb' => $accessoryHeightThumb
					),
					'',
					array(
						'component' => 'com_redshop'
					)
				);
			}
			else
			{
				if (JFile::exists(REDSHOP_FRONT_IMAGES_RELPATH . "product/" . $accessoryImage))
				{
					$thumbUrl = RedshopHelperMedia::getImagePath(
						$accessoryImage,
						'',
						'thumb',
						'product',
						$accessoryWidthThumb,
						$accessoryHeightThumb,
						Redshop::getConfig()->get('USE_IMAGE_SIZE_SWAPPING')
					);
				}
				else
				{
					$thumbUrl = RedshopHelperMedia::getImagePath(
						'noimage.jpg',
						'',
						'thumb',
						'',
						$accessoryWidthThumb,
						$accessoryHeightThumb,
						Redshop::getConfig()->get('USE_IMAGE_SIZE_SWAPPING')
					);
				}

				$accessoryImg = RedshopLayoutHelper::render(
					'tags.accessory.image.no_lightbox',
					array(
						'accessoryProductLink' => $accessoryProductLink,
						'accessoryId' => $accessory->accessory_id,
						'thumbUrl' => $thumbUrl,
						'accessoryWidthThumb'    => $accessoryWidthThumb,
						'accessoryHeightThumb' => $accessoryHeightThumb
					),
					'',
					array(
						'component' => 'com_redshop'
					)
				);
			}
		}

		$template = str_replace($accessoryImgTag, $accessoryImg, $template);
	}

	public function replaceAddCheckbox($accessory, &$template, $commonId, $attributes, $accessoryPrice, $accessoryPriceWithoutVAT)
	{
		$accessoryChecked = "";

		if (($this->data['isAjax'] == 1 && in_array($accessory->accessory_id, $selectedAccessory))
			|| ($this->data['isAjax'] == 0 && $accessory->setdefault_selected))
		{
			$accessoryChecked = "checked";
		}

		$checkbox = RedshopLayoutHelper::render(
			'tags.accessory.add_chkbox',
			array(
				'productId'   => $this->data['productId'],
				'accessoryId' => $accessory->accessory_id,
				'commonId'    => $commonId,
				'attributes'  => $attributes,
				'relProductId' => $this->data['relProductId'],
				'prefix' => $this->data['prefix'],
				'accessoryPriceWithoutVAT' => $accessoryPriceWithoutVAT,
				'accessoryPrice' => $accessoryPrice,
				'accessoryChecked' => $accessoryChecked
			),
			'',
			array(
				'component' => 'com_redshop'
			)
		);

		$template = str_replace('{accessory_add_chkbox}', $checkbox, $template);
	}
}
